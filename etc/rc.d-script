#!/bin/sh

### BEGIN INIT INFO
# Provides:          hu.dwim.home
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start SBCL with hu.dwim.home at boot time
# Description:       Start the hu.dwim.home services.
### END INIT INFO

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

export LANG=en_US.UTF-8

. /opt/hu.dwim.home/workspace/hu.dwim.home/bin/environment.sh
DAEMON_USER="home-service"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="${PROJECT_NAME} server"
NAME="${PROJECT_NAME}"
DAEMON=/bin/sh
PIDFILE="/var/run/${PROJECT_NAME}/server-loop.pid"
SBCL_PIDFILE="/var/run/${PROJECT_NAME}/sbcl.pid"
DAEMON_ARGS="${WORKSPACE}/${PROJECT_NAME}/bin/server-loop.sh --database-host ${DATABASE_HOST} --database-port ${DATABASE_PORT} --database-user-name ${DATABASE_USER_NAME} --database-name ${DATABASE_NAME} --database-password engedjbe --pid-file ${SBCL_PIDFILE}"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        start-stop-daemon --start --pidfile ${PIDFILE} --exec ${DAEMON} --test > /dev/null \
                || return 1
        start-stop-daemon --start --pidfile ${PIDFILE} --make-pidfile --chuid ${DAEMON_USER} --chdir /opt/${PROJECT_NAME} --exec ${DAEMON} \
                --background --verbose -- ${DAEMON_ARGS} \
                || return 2
        # Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one.  As a last resort, sleep for some time.

        # echo "${NAME} started; logs are available in /var/log/${PROJECT_NAME}/"
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon --stop --verbose --pidfile ${PIDFILE} --retry=TERM/10/KILL/3
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        # Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently.  A last resort is to
        # sleep for some time.
        # start-stop-daemon --stop --oknodo --retry=0/30/KILL/5 --exec $DAEMON
        # [ "$?" = 2 ] && return 2
        # Many daemons don't delete their pidfiles when they exit.
        rm -f "${PIDFILE}"
        start-stop-daemon --stop --verbose --pidfile ${SBCL_PIDFILE} --retry=TERM/30/KILL/3
        # rm -f "${SBCL_PIDFILE}"

        return "$RETVAL"
}

case "$1" in
  start)
        log_daemon_msg "Starting $DESC"
        do_start
        case "$?" in
                0) log_end_msg 0 ;;
                1) log_end_msg 0 ;;
                2) log_end_msg 1 ;;
        esac
        ;;
  stop)
        log_daemon_msg "Stopping $DESC"
        do_stop
        case "$?" in
                0|1) log_end_msg 0 ;;
                2)   log_end_msg 1 ;;
        esac
        ;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                  # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $0 {start|stop|restart|force-reload}" >&2
        exit 3
        ;;
esac
